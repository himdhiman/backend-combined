# Generated by Django 3.2.12 on 2022-03-17 11:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Bookmark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.EmailField(max_length=150)),
                ("data", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CompanyTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Editorial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("problem_Id", models.IntegerField(blank=True, null=True)),
                ("cpp17", models.TextField(blank=True, null=True)),
                ("java", models.TextField(blank=True, null=True)),
                ("python2", models.TextField(blank=True, null=True)),
                ("python3", models.TextField(blank=True, null=True)),
                ("cpp14", models.TextField(blank=True, null=True)),
                ("c", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_by", models.EmailField(max_length=150)),
                ("title", models.CharField(max_length=100)),
                ("problem_statement", models.TextField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
                ("input_format", models.TextField(blank=True, null=True)),
                ("constraints", models.TextField(blank=True, null=True)),
                ("output_format", models.TextField(blank=True, null=True)),
                ("max_score", models.IntegerField(blank=True, null=True)),
                (
                    "problem_level",
                    models.CharField(
                        choices=[("E", "Easy"), ("M", "Medium"), ("H", "Hard")],
                        max_length=20,
                    ),
                ),
                ("accuracy", models.IntegerField(default=0)),
                ("totalSubmissions", models.IntegerField(default=0)),
                ("sample_Tc", models.IntegerField(default=0)),
                ("total_Tc", models.IntegerField(default=0)),
                ("created_At", models.DateField(auto_now=True)),
                ("memory_Limit", models.IntegerField(blank=True, default=1, null=True)),
                ("time_Limit", models.IntegerField(blank=True, default=1, null=True)),
                ("publically_visible", models.BooleanField(default=True)),
                ("approved_by_admin", models.BooleanField(default=False)),
                ("up_votes", models.IntegerField(default=0)),
                ("down_votes", models.IntegerField(default=0)),
                (
                    "company_tags",
                    models.ManyToManyField(
                        to="problems.CompanyTag", verbose_name="list of company tags"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SavedCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_By", models.CharField(max_length=50)),
                ("problem_Id", models.IntegerField(blank=True, null=True)),
                ("code", models.TextField(blank=True, null=True)),
                ("language", models.CharField(max_length=50)),
                (
                    "submission_Date_Time",
                    models.DateTimeField(auto_now=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_By", models.CharField(max_length=50)),
                ("problem_Id", models.IntegerField()),
                ("language", models.CharField(max_length=50)),
                ("task_id", models.TextField(blank=True, null=True)),
                ("code", models.TextField()),
                ("status", models.CharField(default="Queued", max_length=30)),
                ("error", models.TextField(blank=True, null=True)),
                ("test_Cases_Passed", models.IntegerField(blank=True, null=True)),
                ("total_Test_Cases", models.IntegerField(blank=True, null=True)),
                ("score", models.IntegerField(blank=True, null=True)),
                ("total_score", models.IntegerField(blank=True, null=True)),
                (
                    "submission_Date_Time",
                    models.DateTimeField(auto_now=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="UpvotesDownvote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mail_Id", models.CharField(max_length=50)),
                ("upvote", models.TextField(blank=True, null=True)),
                ("downvote", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProblemMedia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "media_type",
                    models.CharField(
                        blank=True, default="image", max_length=20, null=True
                    ),
                ),
                ("public_id", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="problems.problem",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="problem",
            name="tags",
            field=models.ManyToManyField(to="problems.Tag"),
        ),
    ]
